% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compose_email.R
\name{compose_email}
\alias{compose_email}
\title{Create the email message body}
\usage{
compose_email(body = NULL, header = NULL, footer = NULL,
  background_color = "#f6f6f6", .title = NULL,
  .envir = parent.frame(), ...)
}
\arguments{
\item{header, body, footer}{The three layout sections for an email message
(ordered from top to bottom). Markdown text can be supplied to each of
these. String interpolation is enabled via curly braces and named arguments
in \code{...}. Alternatively, we can supply a set of \code{block_*()} calls enclosed
within the \code{\link[=blocks]{blocks()}} function to take advantage of precomposed HTML
blocks.}

\item{background_color}{The color to use for the e-mail's background. You
can provide any valid color specification supported by the
\href{https://developer.mozilla.org/docs/Web/CSS/background-color}{background-color CSS property}.}

\item{.title}{The title of the email message. This is not the subject but the
HTML title text which may appear in limited circumstances.}

\item{.envir}{An opportunity to specify the environment. By default, this is
the \code{\link[=parent.frame]{parent.frame()}}.}

\item{...}{Expression strings for string interpolation within the \code{header},
\code{body}, and \code{footer}.}
}
\value{
An \code{email_message} object.
}
\description{
The \code{compose_email()} function allows us to easily create an email message.
We can use \code{glue}'s string interpolation semantics to incorporate external
objects or evaluate R code within the message body, the header, or the footer
(using curly braces to enclose such R expressions). Local variables can be
specified in the function call (using named arguments with \code{...}) and any
variables not found in \code{...} will be searched for in the global environment.
}
\examples{
# Create a simple email message using
# Markdown-formatted text in `body`
email <-
  compose_email(
  body = "
Hello!

## This a section heading

We can use Markdown formatting \\\\
to **embolden** text or to add \\\\
*emphasis*.

Cheers")

# We can use string interpolation to
# add in R code or strings assigned
# to variables; variables can be
# obtained from the global workspace
# or from temporary variables in the
# function call
sender_name <- "Shelly"

email <-
  compose_email(
  body = "
Hello!

I just wanted to let you \\\\
know that the {thing} that \\\\
asked me for is ready to \\\\
pick up. So, come over and \\\\
do that.

Cheers,

{sender_name}",
  thing = "report"
  )

# The email message can always be
# previewed by calling the object
if (interactive()) email

}
